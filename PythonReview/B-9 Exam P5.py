# Exam Practice 5
# 求 1!+2!+3!+...+20! 的计算结果

# 1. 简单测试一下，希望 20! 不会超过程序的内存上限，但我发现连乘 20 个数太笨重了
# 2. 因此，这里目的应该是：考验如何构建表示一个阶乘数以及多个阶乘数的和的关系 —— 递归

# 1. 表示一个阶乘数，应具备如下结构定义：
#       (1) 从哪开始 n
#       (2) 连乘关系 n * (n - 1)!【表示两两连续数字之间的关系，没必要考虑相隔几个的关系】【漏了!叹号，因此前面思考有误，每次考虑的是单个变量与整体的关系】
#       (3) 如何结束 0! = 1
def recursion(n):
    if n == 1:
        return 1
    return n * recursion(n - 1) # 【这里条件错了，漏了调用自身，因为从结构推导而来的关系是显而易见的，但忽略了很重要的一点 —— n*(n-1)! 叹号！！】
# print(recursion(3)) # 想把 print 的格式封装， 貌似 TDD 测试里面有相应的方法

# 2. 表示连续 n 个阶乘数的和: rec(n) + rec(n - 1) + ... + rec(2) + rec()
#       (1) 因此，用一个循环即可表示

n = int(input('Enter a number n to calculate the sum of factorial form 1 to n: '))
sum = 0
for i in range(1, n + 1):
    print(i)
    sum += recursion(i)

print(sum)

# 【后话】我对自己这里终于能够清晰表述、一步步从需求推导的递归思路很满意 (2022/03/22 17:59:33)